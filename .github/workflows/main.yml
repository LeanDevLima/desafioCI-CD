name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: leanlima/ms-saudacoes-aleatorias
  DOCKER_TAG: ${{ github.sha }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Run golint
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...
    - name: Run go vet
      run: go vet ./...
    - name: Run go fmt
      run: go fmt ./...

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Run tests
      run: |
        mkdir -p reports
        go test -v -coverprofile=reports/coverage.out ./... 2>&1 | tee reports/test.log
        go tool cover -html=reports/coverage.out -o reports/coverage.html
        go install github.com/jstemmer/go-junit-report@latest
        cat reports/test.log | go-junit-report > reports/junit.xml
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: reports/

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:latest
    - name: Output image info
      run: echo "Image pushed: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Install Koyeb Terraform provider
      run: |
        mkdir -p ~/.terraform.d/plugins
        curl -LO https://github.com/koyeb/terraform-provider-koyeb/releases/download/v2.1.0/terraform-provider-koyeb_v2.1.0_linux_amd64.zip
        unzip terraform-provider-koyeb_v2.1.0_linux_amd64.zip -d ~/.terraform.d/plugins/
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var="koyeb_token=${{ secrets.KOYEB_API_KEY }}" -var="image=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="koyeb_token=${{ secrets.KOYEB_API_KEY }}" -var="image=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
    - name: Get Koyeb service URL
      id: koyeb
      working-directory: ./terraform
      run: |
        echo "url=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT
    - name: Show service URL
      run: echo "Service deployed at: ${{ steps.koyeb.outputs.url }}"

  destroy:
    runs-on: ubuntu-latest
    needs: []
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Install Koyeb Terraform provider
      run: |
        mkdir -p ~/.terraform.d/plugins
        curl -LO https://github.com/koyeb/terraform-provider-koyeb/releases/download/v2.1.0/terraform-provider-koyeb_v2.1.0_linux_amd64.zip
        unzip terraform-provider-koyeb_v2.1.0_linux_amd64.zip -d ~/.terraform.d/plugins/
    - name: Terraform Destroy
      working-directory: ./terraform
      run: terraform destroy -auto-approve -var="koyeb_token=${{ secrets.KOYEB_API_KEY }}"