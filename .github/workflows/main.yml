name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: leanlima/ms-saudacoes-aleatorias
  DOCKER_TAG: ${{ github.sha }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    - name: Run lint checks
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...
        go vet ./...
        go fmt ./...

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    - name: Run tests
      run: |
        mkdir -p reports
        go test -v -coverprofile=reports/coverage.out ./...
        go tool cover -html=reports/coverage.out -o reports/coverage.html

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }},${{ env.DOCKER_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
    
    - name: Install Koyeb Provider
      run: |
        mkdir -p /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64
        curl -sLo /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64/terraform-provider-koyeb \
          https://github.com/koyeb/terraform-provider-koyeb/releases/download/v2.1.0/terraform-provider-koyeb_2.1.0_linux_amd64
        chmod +x /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64/terraform-provider-koyeb
    
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        export TF_PLUGIN_CACHE_DIR="/tmp/terraform-plugins"
        terraform init -input=false -plugin-dir=/tmp/terraform-plugins
        
    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        export TF_PLUGIN_CACHE_DIR="/tmp/terraform-plugins"
        terraform apply -auto-approve -input=false \
          -var="koyeb_token=${{ secrets.KOYEB_API_KEY }}" \
          -var="image=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
      env:
        TF_LOG: INFO

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
    
    - name: Install Koyeb Provider
      run: |
        mkdir -p /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64
        curl -sLo /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64/terraform-provider-koyeb \
          https://github.com/koyeb/terraform-provider-koyeb/releases/download/v2.1.0/terraform-provider-koyeb_2.1.0_linux_amd64
        chmod +x /tmp/terraform-plugins/koyeb/koyeb/2.1.0/linux_amd64/terraform-provider-koyeb
    
    - name: Terraform Destroy
      working-directory: ./terraform
      run: |
        export TF_PLUGIN_CACHE_DIR="/tmp/terraform-plugins"
        terraform destroy -auto-approve -input=false \
          -var="koyeb_token=${{ secrets.KOYEB_API_KEY }}"